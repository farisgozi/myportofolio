---
// 3D Floating Objects Component
// Untuk membuat elemen 3D yang menawan dan bergerak secara dinamis
---

<div class="dna-helix-container">
  <div class="dna-wrapper" id="dnaHelix">
    <!-- DNA Strands -->
    <div class="dna-strand left">
      <!-- Left strand particles -->
      <div class="dna-particle" style="--delay: 0s; --x-pos: 0; --y-pos: 0;"></div>
      <div class="dna-particle" style="--delay: 0.5s; --x-pos: 0; --y-pos: 10;"></div>
      <div class="dna-particle" style="--delay: 1s; --x-pos: 0; --y-pos: 20;"></div>
      <div class="dna-particle" style="--delay: 1.5s; --x-pos: 0; --y-pos: 30;"></div>
      <div class="dna-particle" style="--delay: 2s; --x-pos: 0; --y-pos: 40;"></div>
      <div class="dna-particle" style="--delay: 2.5s; --x-pos: 0; --y-pos: 50;"></div>
      <div class="dna-particle" style="--delay: 3s; --x-pos: 0; --y-pos: 60;"></div>
      <div class="dna-particle" style="--delay: 3.5s; --x-pos: 0; --y-pos: 70;"></div>
      <div class="dna-particle" style="--delay: 4s; --x-pos: 0; --y-pos: 80;"></div>
      <div class="dna-particle" style="--delay: 4.5s; --x-pos: 0; --y-pos: 90;"></div>
    </div>
    
    <div class="dna-strand right">
      <!-- Right strand particles -->
      <div class="dna-particle" style="--delay: 0.25s; --x-pos: 1; --y-pos: 5;"></div>
      <div class="dna-particle" style="--delay: 0.75s; --x-pos: 1; --y-pos: 15;"></div>
      <div class="dna-particle" style="--delay: 1.25s; --x-pos: 1; --y-pos: 25;"></div>
      <div class="dna-particle" style="--delay: 1.75s; --x-pos: 1; --y-pos: 35;"></div>
      <div class="dna-particle" style="--delay: 2.25s; --x-pos: 1; --y-pos: 45;"></div>
      <div class="dna-particle" style="--delay: 2.75s; --x-pos: 1; --y-pos: 55;"></div>
      <div class="dna-particle" style="--delay: 3.25s; --x-pos: 1; --y-pos: 65;"></div>
      <div class="dna-particle" style="--delay: 3.75s; --x-pos: 1; --y-pos: 75;"></div>
      <div class="dna-particle" style="--delay: 4.25s; --x-pos: 1; --y-pos: 85;"></div>
      <div class="dna-particle" style="--delay: 4.75s; --x-pos: 1; --y-pos: 95;"></div>
    </div>
    
    <!-- Connecting lines (base pairs) -->
    <div class="dna-connections">
      <div class="base-pair" style="--delay: 0s; --y-pos: 0;"></div>
      <div class="base-pair" style="--delay: 0.5s; --y-pos: 10;"></div>
      <div class="base-pair" style="--delay: 1s; --y-pos: 20;"></div>
      <div class="base-pair" style="--delay: 1.5s; --y-pos: 30;"></div>
      <div class="base-pair" style="--delay: 2s; --y-pos: 40;"></div>
      <div class="base-pair" style="--delay: 2.5s; --y-pos: 50;"></div>
      <div class="base-pair" style="--delay: 3s; --y-pos: 60;"></div>
      <div class="base-pair" style="--delay: 3.5s; --y-pos: 70;"></div>
      <div class="base-pair" style="--delay: 4s; --y-pos: 80;"></div>
      <div class="base-pair" style="--delay: 4.5s; --y-pos: 90;"></div>
    </div>
  </div>
</div>

<style>
  .dna-helix-container {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    pointer-events: none;
    overflow: hidden;
    z-index: -1;
  }
  
  .dna-wrapper {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotateX(60deg) rotateZ(0deg);
    transform-style: preserve-3d;
    height: 100%;
    width: 300px;
    animation: dna-rotate 20s linear infinite;
    will-change: transform;
  }
  
  @keyframes dna-rotate {
    0% { transform: translate(-50%, -50%) rotateX(60deg) rotateZ(0deg); }
    100% { transform: translate(-50%, -50%) rotateX(60deg) rotateZ(360deg); }
  }
  
  .dna-strand {
    position: absolute;
    top: 0;
    height: 100%;
    width: 100%;
    transform-style: preserve-3d;
  }
  
  .dna-strand.left {
    left: -60px;
    animation: strand-wave-left 4s ease-in-out infinite;
  }
  
  .dna-strand.right {
    right: -60px;
    animation: strand-wave-right 4s ease-in-out infinite;
  }
  
  @keyframes strand-wave-left {
    0%, 100% { transform: translateZ(0) translateX(0); }
    50% { transform: translateZ(20px) translateX(-10px); }
  }
  
  @keyframes strand-wave-right {
    0%, 100% { transform: translateZ(0) translateX(0); }
    50% { transform: translateZ(20px) translateX(10px); }
  }
  
  .dna-particle {
    position: absolute;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--primary-color, #9d4edd), var(--secondary-color, #38b2ac));
    top: calc(var(--y-pos) * 1%);
    left: calc(var(--x-pos) * 100%);
    transform-style: preserve-3d;
    box-shadow: 0 0 15px rgba(157, 78, 221, 0.5);
    animation: particle-glow 3s ease-in-out infinite;
    animation-delay: calc(var(--delay));
    transform: translateZ(0) translateX(calc(100px * sin(var(--y-pos) * 0.1rad))); 
  }
  
  .dna-strand.left .dna-particle {
    --primary-color: #9d4edd;
    --secondary-color: #38b2ac;
    transform: translateZ(0) translateX(calc(100px * sin(var(--y-pos) * 0.1rad + 3.14rad)));
  }
  
  .dna-strand.right .dna-particle {
    --primary-color: #38b2ac;
    --secondary-color: #9d4edd;
    transform: translateZ(0) translateX(calc(100px * sin(var(--y-pos) * 0.1rad)));
  }
  
  @keyframes particle-glow {
    0%, 100% { opacity: 0.8; box-shadow: 0 0 15px rgba(157, 78, 221, 0.5); }
    50% { opacity: 1; box-shadow: 0 0 25px rgba(157, 78, 221, 0.8); }
  }
  
  .dna-connections {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
  }
  
  .base-pair {
    position: absolute;
    width: 160px;
    height: 2px;
    left: 50%;
    top: calc(var(--y-pos) * 1%);
    transform: translateX(-50%) translateZ(calc(50px * sin(var(--y-pos) * 0.1rad)));
    background: linear-gradient(90deg, rgba(157, 78, 221, 0.3), rgba(56, 178, 172, 0.3));
    animation: base-pair-pulse 3s ease-in-out infinite;
    animation-delay: calc(var(--delay));
  }
  
  @keyframes base-pair-pulse {
    0%, 100% { opacity: 0.3; height: 2px; }
    50% { opacity: 0.5; height: 3px; }
  }
  
  @media (max-width: 768px) {
    .dna-wrapper {
      transform: translate(-50%, -50%) rotateX(60deg) rotateZ(0deg) scale(0.6);
    }
    
    .dna-particle {
      width: 8px;
      height: 8px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const dnaHelix = document.getElementById('dnaHelix') as HTMLElement | null;
    const dnaParticles: NodeListOf<Element> = document.querySelectorAll('.dna-particle');
    const basePairs: NodeListOf<Element> = document.querySelectorAll('.base-pair');
    
    // Deteksi preferensi reduced motion
    const prefersReducedMotion: boolean = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    // Simpan status tilt
    let currentRotateX: number = 60;
    let currentRotateZ: number = 0;
    
    // Mouse movement effect dengan throttling
    let ticking: boolean = false;
    let lastMouseX: number = 0;
    let lastMouseY: number = 0;
    let rafId: number | null = null;
    
    const handleMouseMove = function(e: MouseEvent): void {
      // Simpan posisi mouse
      lastMouseX = e.clientX / window.innerWidth - 0.5;
      lastMouseY = e.clientY / window.innerHeight - 0.5;
      
      // Gunakan requestAnimationFrame untuk throttling
      if (!ticking) {
        rafId = window.requestAnimationFrame(() => {
          // Berhenti update jika preferensi reduced motion aktif
          if (!prefersReducedMotion && dnaHelix) {
            updateHelix(lastMouseX, lastMouseY);
          }
          ticking = false;
        });
        
        ticking = true;
      }
    };
    
    const updateHelix = (mouseX: number, mouseY: number): void => {
      // Update rotasi helix
      currentRotateX = 60 + mouseY * 10;
      currentRotateZ = mouseX * 30;
      
      if (dnaHelix) {
        dnaHelix.style.transform = `translate(-50%, -50%) rotateX(${currentRotateX}deg) rotateZ(${currentRotateZ}deg)`;
      }
      
      // Batasi update partikel untuk performa (hanya update setiap 2 frame)
      if (Math.random() > 0.5) {
        updateParticles(mouseX, mouseY);
      }
    };
    
    const updateParticles = (mouseX: number, mouseY: number): void => {
      // Make particles react to mouse
      dnaParticles.forEach((particle: Element) => {
        if (!(particle instanceof HTMLElement)) return;
        
        const yPos = parseFloat(particle.style.getPropertyValue('--y-pos')) || 0;
        const distanceFactor = 1 - Math.min(1, Math.abs(yPos/50 - 0.5) * 2);
        
        particle.style.transform = `translateZ(${mouseY * 50 * distanceFactor}px) 
                                translateX(${(particle.classList.contains('left') ? -1 : 1) * 
                                  (100 + mouseX * 30) * Math.sin(yPos * 0.1 + (particle.classList.contains('left') ? Math.PI : 0))}px)`;
      });
      
      // Make base pairs react to mouse dengan lebih efisien
      basePairs.forEach((pair: Element) => {
        if (!(pair instanceof HTMLElement)) return;
        
        const yPos = parseFloat(pair.style.getPropertyValue('--y-pos')) || 0;
        const distanceFactor = 1 - Math.min(1, Math.abs(yPos/50 - 0.5) * 2);
        
        pair.style.width = `${160 + mouseX * 40 * distanceFactor}px`;
      });
    };
    
    // Scroll effect dengan throttling
    let lastScrollY: number = 0;
    let scrollTicking: boolean = false;
    
    const handleScroll = function(): void {
      lastScrollY = window.scrollY || window.pageYOffset;
      
      // Gunakan rAF untuk throttling
      if (!scrollTicking) {
        window.requestAnimationFrame(() => {
          if (!prefersReducedMotion && dnaHelix) {
            const scrollFactor = lastScrollY / (document.body.scrollHeight - window.innerHeight);
            
            // Update dengan animasi yang lebih efisien untuk scroll
            dnaHelix.style.transform = `translate(-50%, -50%) rotateX(${60 + scrollFactor * 20}deg) rotateZ(${scrollFactor * 180}deg)`;
            
            // Update hanya sebagian partikel setiap kali untuk performa lebih baik
            const updateCount = Math.min(5, dnaParticles.length);
            for (let i = 0; i < updateCount; i++) {
              const particleIndex = Math.floor(Math.random() * dnaParticles.length);
              const particle = dnaParticles[particleIndex];
              if (!(particle instanceof HTMLElement)) continue;
              
              const yPos = parseFloat(particle.style.getPropertyValue('--y-pos')) || 0;
              particle.style.top = `${(yPos - scrollFactor * 20 + 100) % 100}%`;
            }
            
            // Update base pairs juga secara progresif
            const updateBPCount = Math.min(3, basePairs.length);
            for (let i = 0; i < updateBPCount; i++) {
              const pairIndex = Math.floor(Math.random() * basePairs.length);
              const pair = basePairs[pairIndex];
              if (!(pair instanceof HTMLElement)) continue;
              
              const yPos = parseFloat(pair.style.getPropertyValue('--y-pos')) || 0;
              pair.style.top = `${(yPos - scrollFactor * 20 + 100) % 100}%`;
            }
          }
          
          scrollTicking = false;
        });
        
        scrollTicking = true;
      }
    };
    
    // Aktifkan event listener jika tidak ada preferensi reduced motion
    if (!prefersReducedMotion) {
      document.addEventListener('mousemove', handleMouseMove, { passive: true });
      window.addEventListener('scroll', handleScroll, { passive: true });
    } else {
      // Matikan animasi untuk preferensi reduced motion
      if (dnaHelix) {
        dnaHelix.style.animation = 'none';
      }
      dnaParticles.forEach((particle: Element) => {
        if (!(particle instanceof HTMLElement)) return;
        particle.style.animation = 'none';
      });
      basePairs.forEach((pair: Element) => {
        if (!(pair instanceof HTMLElement)) return;
        pair.style.animation = 'none';
      });
    }
    
    // Deteksi perubahan preferensi reduced motion
    window.matchMedia('(prefers-reduced-motion: reduce)').addEventListener('change', e => {
      if (e.matches) {
        // Matikan event listener dan animasi
        document.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('scroll', handleScroll);
        
        if (dnaHelix) {
          dnaHelix.style.animation = 'none';
        }
        dnaParticles.forEach((particle: Element) => {
          if (!(particle instanceof HTMLElement)) return;
          particle.style.animation = 'none';
        });
        basePairs.forEach((pair: Element) => {
          if (!(pair instanceof HTMLElement)) return;
          pair.style.animation = 'none';
        });
      } else {
        // Hidupkan kembali event listener dan animasi
        document.addEventListener('mousemove', handleMouseMove, { passive: true });
        window.addEventListener('scroll', handleScroll, { passive: true });
        
        if (dnaHelix) {
          dnaHelix.style.animation = 'dna-rotate 20s linear infinite';
        }
        dnaParticles.forEach((particle: Element) => {
          if (!(particle instanceof HTMLElement)) return;
          particle.style.animation = 'particle-glow 3s ease-in-out infinite';
        });
        basePairs.forEach((pair: Element) => {
          if (!(pair instanceof HTMLElement)) return;
          pair.style.animation = 'base-pair-pulse 3s ease-in-out infinite';
        });
      }
    });
    
    // Clean up event listener saat component unmount
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('scroll', handleScroll);
      if (rafId) {
        window.cancelAnimationFrame(rafId);
      }
    };
  });
</script> 