---
// 3D Tilt Card Component - Card dengan efek 3D tilt saat mouse hover
interface Props {
  className?: string;
  maxTilt?: number;
  scale?: number;
  perspective?: number;
  transitionSpeed?: number;
  tiltReverse?: boolean;
  glareEffect?: boolean;
  glareMaxOpacity?: number;
  styleAttrs?: Record<string, string>; // Tambahan untuk atribut style dan data-*
}

const {
  className = '',
  maxTilt = 10,
  scale = 1.05,
  perspective = 1000,
  transitionSpeed = 400,
  tiltReverse = false,
  glareEffect = true,
  glareMaxOpacity = 0.3,
  styleAttrs = {}
} = Astro.props;

// Memproses atribut tambahan - memperbaiki linter error
const dynamicAttrs = { ...styleAttrs };
---

<div class={`tilt-card-wrapper ${className}`} {...dynamicAttrs}>
  <div class="tilt-card" data-tilt-options={JSON.stringify({
    maxTilt,
    scale,
    perspective,
    transitionSpeed,
    tiltReverse,
    glareEffect,
    glareMaxOpacity
  })}>
    <div class="tilt-card-content">
      <slot />
    </div>
    {glareEffect && <div class="tilt-card-glare"></div>}
  </div>
</div>

<style>
  .tilt-card-wrapper {
    position: relative;
    width: 100%;
    transform-style: preserve-3d;
  }
  
  .tilt-card {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transform: perspective(1000px);
    transition: transform 0.4s ease;
    will-change: transform;
  }
  
  .tilt-card-content {
    position: relative;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    z-index: 1;
  }
  
  .tilt-card-glare {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      125deg, 
      rgba(255, 255, 255, 0) 0%, 
      rgba(255, 255, 255, 0.05) 40%, 
      rgba(255, 255, 255, 0.2) 60%, 
      rgba(255, 255, 255, 0) 100%
    );
    opacity: 0;
    pointer-events: none;
    transform: translateZ(1px);
    mix-blend-mode: overlay;
    transition: opacity 0.4s ease;
    z-index: 2;
  }
</style>

<script>
  // Kelas untuk mengelola efek tilt
  class TiltEffect {
    element: HTMLElement;
    options: any;
    isActive: boolean = false;
    isTilting: boolean = false;
    width: number;
    height: number;
    left: number;
    top: number;
    transitionTimeout: number | null = null;
    updateAnimationId: number | null = null;
    
    constructor(element: HTMLElement, options: any) {
      this.element = element;
      this.options = options;
      
      // Dapatkan dimensi dan posisi
      const rect = this.element.getBoundingClientRect();
      this.width = rect.width;
      this.height = rect.height;
      this.left = rect.left;
      this.top = rect.top;
      
      // Inisialisasi
      this.init();
    }
    
    init() {
      // Set perspective
      this.element.style.transform = `perspective(${this.options.perspective}px)`;
      
      // Bind event listeners
      this.addEventListeners();
      
      // Tambahkan juga event resize untuk memperbarui dimensi
      window.addEventListener('resize', this.updateDimensions.bind(this));
      
      // Dan scroll untuk memperbarui posisi
      window.addEventListener('scroll', this.updatePosition.bind(this));
    }
    
    addEventListeners() {
      this.element.addEventListener('mouseenter', this.onMouseEnter.bind(this));
      this.element.addEventListener('mousemove', this.onMouseMove.bind(this));
      this.element.addEventListener('mouseleave', this.onMouseLeave.bind(this));
    }
    
    updateDimensions() {
      const rect = this.element.getBoundingClientRect();
      this.width = rect.width;
      this.height = rect.height;
      this.updatePosition();
    }
    
    updatePosition() {
      const rect = this.element.getBoundingClientRect();
      this.left = rect.left;
      this.top = rect.top;
    }
    
    onMouseEnter() {
      this.isActive = true;
      
      // Hapus transisi jika ada
      if (this.transitionTimeout) {
        clearTimeout(this.transitionTimeout);
        this.transitionTimeout = null;
      }
      
      // Scale up
      if (this.options.scale !== 1) {
        this.element.style.transform = `perspective(${this.options.perspective}px) scale(${this.options.scale})`;
      }
      
      // Tampilkan glare jika diaktifkan
      if (this.options.glareEffect) {
        const glareElement = this.element.querySelector('.tilt-card-glare') as HTMLElement;
        if (glareElement) {
          glareElement.style.opacity = '1';
        }
      }
    }
    
    onMouseMove(e: MouseEvent) {
      if (!this.isActive) return;
      
      // Mencegah terlalu banyak update dengan requestAnimationFrame
      if (!this.isTilting) {
        this.isTilting = true;
        
        this.updateAnimationId = requestAnimationFrame(() => {
          this.processTilt(e);
          this.isTilting = false;
        });
      }
    }
    
    processTilt(e: MouseEvent) {
      // Hitung posisi mouse relatif terhadap elemen
      const mouseX = e.clientX - this.left;
      const mouseY = e.clientY - this.top;
      
      // Hitung persentase posisi mouse dari -1 hingga 1
      const tiltX = ((mouseX / this.width) * 2 - 1) * (this.options.tiltReverse ? -1 : 1);
      const tiltY = ((mouseY / this.height) * 2 - 1) * (this.options.tiltReverse ? -1 : 1);
      
      // Hitung sudut tilt
      const angleX = tiltY * this.options.maxTilt;
      const angleY = tiltX * this.options.maxTilt * -1;
      
      // Terapkan transformasi
      this.element.style.transform = `perspective(${this.options.perspective}px) rotateX(${angleX}deg) rotateY(${angleY}deg) scale(${this.options.scale})`;
      
      // Update posisi glare jika diaktifkan
      if (this.options.glareEffect) {
        const glareElement = this.element.querySelector('.tilt-card-glare') as HTMLElement;
        if (glareElement) {
          // Posisikan glare berdasarkan posisi mouse
          const glareX = (mouseX / this.width) * 100;
          const glareY = (mouseY / this.height) * 100;
          
          glareElement.style.background = `radial-gradient(circle at ${glareX}% ${glareY}%, rgba(255,255,255,${this.options.glareMaxOpacity}) 0%, rgba(255,255,255,0) 80%)`;
        }
      }
    }
    
    onMouseLeave() {
      this.isActive = false;
      
      // Reset transformasi dengan transisi
      this.element.style.transition = `transform ${this.options.transitionSpeed}ms ease-out`;
      this.element.style.transform = `perspective(${this.options.perspective}px) rotateX(0deg) rotateY(0deg) scale(1)`;
      
      // Sembunyikan glare jika diaktifkan
      if (this.options.glareEffect) {
        const glareElement = this.element.querySelector('.tilt-card-glare') as HTMLElement;
        if (glareElement) {
          glareElement.style.opacity = '0';
        }
      }
      
      // Hapus transisi setelah selesai
      this.transitionTimeout = setTimeout(() => {
        this.element.style.transition = '';
      }, this.options.transitionSpeed) as unknown as number;
    }
    
    destroy() {
      // Bersihkan event listeners
      this.element.removeEventListener('mouseenter', this.onMouseEnter);
      this.element.removeEventListener('mousemove', this.onMouseMove);
      this.element.removeEventListener('mouseleave', this.onMouseLeave);
      window.removeEventListener('resize', this.updateDimensions);
      window.removeEventListener('scroll', this.updatePosition);
      
      // Bersihkan timeouts dan animation frames
      if (this.transitionTimeout) {
        clearTimeout(this.transitionTimeout);
      }
      
      if (this.updateAnimationId) {
        cancelAnimationFrame(this.updateAnimationId);
      }
      
      // Reset transformasi
      this.element.style.transform = '';
      this.element.style.transition = '';
    }
  }
  
  // Inisialisasi tilt card saat dokumen dimuat
  document.addEventListener('DOMContentLoaded', () => {
    const tiltCards = document.querySelectorAll('.tilt-card');
    
    tiltCards.forEach((card) => {
      // Ambil opsi dari atribut data
      let options = {};
      
      const optionsAttr = card.getAttribute('data-tilt-options');
      if (optionsAttr) {
        try {
          options = JSON.parse(optionsAttr);
        } catch (e) {
          console.error('Error parsing tilt options:', e);
        }
      }
      
      // Buat instance TiltEffect
      new TiltEffect(card as HTMLElement, options);
    });
  });
</script> 