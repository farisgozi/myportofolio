---
// ProjectCard Component with Video Support
interface Props {
  title: string;
  description: string;
  thumbnailSrc: string;
  videoUrl?: string | null;
  tags: string[];
  mainTag: string;
  delay?: number;
}

const { 
  title, 
  description, 
  thumbnailSrc, 
  videoUrl,
  tags, 
  mainTag,
  delay = 0
} = Astro.props;

// Debug: Log the image path to verify
const imagePath = `/images/${thumbnailSrc}`;
console.log(`Loading image from: ${imagePath}`);

// Extract host name from video URL to determine video source
const getVideoSource = (url: string) => {
  if (!url || url === "null") return null;
  if (url.includes('instagram')) return 'instagram';
  if (url.includes('youtube')) return 'youtube';
  if (url.includes('vimeo')) return 'vimeo';
  return 'generic';
};

const videoSource = videoUrl && videoUrl !== "null" ? getVideoSource(videoUrl) : null;

// Check if we need to use a local video copy instead of external URL
// This helps when external URLs may not work correctly
let videoSrc = videoUrl;
let fallbackImage = imagePath;

// Flag to determine if play button should be shown
const hasValidVideo = videoUrl && videoUrl !== "null";
---

<div class="project-card" 
  data-scroll data-animate="fade-in-up" 
  style={`--delay: ${delay}ms;`}>
  <div class="bg-white dark:bg-gray-800 rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 h-full flex flex-col">
    <!-- Video/Image Container -->
    <div class="relative overflow-hidden group cursor-pointer project-media-container">
      <!-- Thumbnail image that shows initially -->
      <img 
        src={imagePath} 
        alt={title} 
        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
        loading="lazy"
        onerror="this.onerror=null; console.error('Failed to load image:', this.src); this.src='/placeholder.jpg';"
      />
      
      <!-- Play button overlay - Only shown if valid video -->
      {hasValidVideo && (
        <div class="absolute inset-0 flex items-center justify-center bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 z-10">
          <button class="play-video-btn bg-white/20 backdrop-blur-sm p-4 rounded-full transform transition-transform duration-300 hover:scale-110" aria-label={`Play video for ${title}`}>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </button>
        </div>
      )}
      
      <!-- Video URL data attribute - Only added if valid video -->
      {hasValidVideo && <div class="hidden video-url" data-url={videoUrl} data-fallback-image={fallbackImage}></div>}
    </div>
    
    <!-- Card Content -->
    <div class="p-6 flex-grow flex flex-col">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-xl font-bold text-gray-900 dark:text-white group-hover:text-primary-500 dark:group-hover:text-primary-400 transition-colors duration-300">{title}</h3>
        <span class="px-2 py-1 bg-primary-100 dark:bg-primary-900/30 text-primary-700 dark:text-primary-300 text-xs font-medium rounded">{mainTag}</span>
      </div>
      
      <p class="text-gray-600 dark:text-gray-400 mb-4 flex-grow">{description}</p>
      
      <!-- Tech stack tags -->
      <div class="flex flex-wrap gap-2 mt-4">
        {tags.map(tag => (
          <span class="px-2 py-1 bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 text-xs rounded">{tag}</span>
        ))}
      </div>
    </div>
  </div>
</div>

<!-- Video Modal (Singleton - Only one needed for the page) -->
<div id="video-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/90 opacity-0 pointer-events-none transition-opacity duration-300">
  <button id="close-video-modal" class="absolute top-4 right-4 text-white p-2 rounded-full bg-black/20 hover:bg-black/40 transition-colors">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>
  
  <div class="video-container max-w-4xl w-full mx-auto relative overflow-hidden aspect-video rounded-lg">
    <!-- Video will be injected here -->
  </div>
</div>

<style>
  /* Ensure image containers have proper dimensions */
  .project-media-container {
    min-height: 200px;
    background-color: rgba(var(--primary-rgb), 0.05);
    position: relative;
    overflow: hidden;
    aspect-ratio: 16 / 9;
  }
  
  .dark .project-media-container {
    background-color: rgba(var(--primary-rgb), 0.1);
  }
  
  .project-media-container img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  /* Add shine effect to cards */
  .project-media-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -75%;
    width: 50%;
    height: 100%;
    background: linear-gradient(
      to right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.3) 100%
    );
    transform: skewX(-25deg);
    z-index: 1;
    transition: 0.75s;
    opacity: 0;
  }
  
  .project-card:hover .project-media-container::before {
    animation: shine 0.75s;
    opacity: 1;
  }
  
  @keyframes shine {
    100% {
      left: 125%;
    }
  }
  
  /* Default project card state - visible by default */
  .project-card {
    transform: translateY(0);
    opacity: 1;
    transition: transform 0.5s ease-out, opacity 0.5s ease-out, box-shadow 0.3s ease;
  }
  
  /* When scroll animation is applied */
  [data-animate="fade-in-up"].project-card {
    opacity: 0;
    transform: translateY(20px);
  }
  
  [data-animate].in-view {
    opacity: 1;
    transform: translateY(0);
  }
  
  /* Video modal */
  #video-modal.active {
    opacity: 1;
    pointer-events: auto;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Element selection and setup
    const projectCards = document.querySelectorAll('.project-card');
    const projectMediaContainers = document.querySelectorAll('.project-media-container');
    const videoModal = document.getElementById('video-modal');
    const videoContainer = document.querySelector('.video-container');
    const closeModalBtn = document.getElementById('close-video-modal');
    
    // Function to handle scroll animations
    function handleScrollAnimations() {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('in-view');
            observer.unobserve(entry.target);
          }
        });
      }, {
        threshold: 0.1,
        rootMargin: '0px 0px -100px 0px'
      });
      
      projectCards.forEach(card => {
        observer.observe(card);
      });
    }
    
    // Function to play video in modal
    function openVideoModal(videoUrl: string, fallbackImage?: string) {
      if (!videoModal || !videoContainer) {
        console.error('Modal elements not found');
        return;
      }
      
      console.log('Opening video modal with URL:', videoUrl);
      
      // Coba buka video langsung dulu
      try {
        // Create video element
        const videoElement = document.createElement('video');
        videoElement.controls = true;
        videoElement.autoplay = true;
        videoElement.className = 'w-full h-full';
        videoElement.muted = false; // Ensure it's not muted
        videoElement.playsInline = true; // Better mobile experience
        videoElement.crossOrigin = "anonymous"; // Tambah crossOrigin agar bisa akses CDN
        
        // Tambahkan Referrer header
        const options = {
          headers: {
            'Referer': 'https://www.instagram.com/'
          }
        };
        
        // Set source dengan URL video
        videoElement.src = videoUrl;
        
        // Add error handling
        videoElement.onerror = function(e) {
          console.error('Error loading video:', e);
          videoContainer.innerHTML = `
            <div class="flex flex-col items-center justify-center h-full text-white">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p class="text-lg font-medium">Terjadi kesalahan saat memuat video</p>
              <p class="text-sm mt-2">Format video tidak didukung atau URL tidak dapat diakses</p>
              <p class="text-sm mt-1 text-accent-400">Kemungkinan karena CORS restrictions dari Instagram</p>
              ${fallbackImage ? `<img src="${fallbackImage}" alt="Thumbnail" class="mt-4 max-w-full max-h-[300px] rounded object-contain" />` : ''}
            </div>
          `;
        };
        
        // Clear any existing content
        videoContainer.innerHTML = '';
        
        // Add the new video element
        videoContainer.appendChild(videoElement);
        
        // Show the modal
        videoModal.classList.add('active');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
      } catch (error) {
        console.error('Failed to load video:', error);
        videoContainer.innerHTML = `
          <div class="flex flex-col items-center justify-center h-full text-white">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <p class="text-lg font-medium">Terjadi kesalahan saat memuat video</p>
            <p class="text-sm mt-2">Format video tidak didukung atau URL tidak dapat diakses</p>
            ${fallbackImage ? `<img src="${fallbackImage}" alt="Thumbnail" class="mt-4 max-w-full max-h-[300px] rounded object-contain" />` : ''}
          </div>
        `;
      }
    }
    
    // Function to close video modal
    function closeVideoModal() {
      if (!videoModal || !videoContainer) return;
      
      videoModal.classList.remove('active');
      document.body.style.overflow = ''; // Re-enable scrolling
      
      // Clear video container after animation completes
      setTimeout(() => {
        videoContainer.innerHTML = '';
      }, 300);
    }
    
    // Add click listeners to all project media containers
    projectMediaContainers.forEach(container => {
      const playButton = container.querySelector('.play-video-btn');
      const videoUrlElement = container.querySelector('.video-url');
      
      if (playButton && videoUrlElement) {
        const videoUrl = videoUrlElement.getAttribute('data-url');
        const fallbackImage = videoUrlElement.getAttribute('data-fallback-image');
        
        playButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          if (videoUrl) {
            openVideoModal(videoUrl, fallbackImage || undefined);
          } else {
            console.error('No video URL found');
          }
        });
      }
    });
    
    // Close modal listeners
    if (closeModalBtn) {
      closeModalBtn.addEventListener('click', closeVideoModal);
    }
    
    if (videoModal) {
      videoModal.addEventListener('click', (e) => {
        if (e.target === videoModal) {
          closeVideoModal();
        }
      });
    }
    
    // Close with ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && videoModal && videoModal.classList.contains('active')) {
        closeVideoModal();
      }
    });
    
    // Debug image loading
    const images = document.querySelectorAll('.project-media-container img');
    images.forEach(img => {
      if (img instanceof HTMLImageElement) {
        console.log(`Image src: ${img.src}`);
        img.addEventListener('load', () => {
          console.log(`Image loaded successfully: ${img.src}`);
        });
        img.addEventListener('error', () => {
          console.error(`Failed to load image: ${img.src}`);
        });
      }
    });
    
    // Initialize scroll animations
    handleScrollAnimations();
  });
</script> 